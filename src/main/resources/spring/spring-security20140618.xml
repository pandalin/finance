<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.2.xsd">

	
<!-- Security filter chain: [
  SecurityContextPersistenceFilter
  ConcurrentSessionFilter
  WebAsyncManagerIntegrationFilter
  LogoutFilter
  UsernamePasswordAuthenticationFilter
  BasicAuthenticationFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  AnonymousAuthenticationFilter
  SessionManagementFilter
  ExceptionTranslationFilter
  MySecurityFilter
  FilterSecurityInterceptor
] -->

	<beans:description>SpringSecurity安全配置</beans:description>
	<!-- 开发环境可以放置 <debug /> 配置，会输出详细Security处理日志，正式环境建议屏蔽 <debug /> 配置 --> 
    <debug />
	<http pattern="/common/css/**" security="none" />
	<http pattern="/common/js/**" security="none" />
	<http pattern="/common/plugins/**" security="none" />
	<http pattern="/common/images/**" security="none" />
	<http pattern="/common/**" security="none" />
	<http pattern="/index.jsp" security="none" />
	<http pattern="/loginfailed" security="none" />
	<http pattern="/login" security="none" />
	<http pattern="/admin/druid/**" security="none" />

	<!--/
	1.开启支持方法注解的权限控制：
	@PreAuthorize：该注解用来确定一个方法是否应该被执行。该注解后面跟着的是一个表达式，如果表达式的值为真，则该方法会被执行。如 @PreAuthorize("hasRole('ROLE_USER')")就说明只有当前用户具有角色 ROLE_USER的时候才会执行。
	@PostAuthorize：该注解用来在方法执行完之后进行访问控制检查。
	@PostFilter：该注解用来对方法的返回结果进行过滤。从返回的集合中过滤掉表达式值为假的元素。如@PostFilter("hasPermission(filterObject, 'read')")说明返回的结果中只保留当前用户有读权限的元素。
	@PreFilter：该注解用来对方法调用时的参数进行过滤。	
	-->
	<global-method-security pre-post-annotations="enabled" />


	<!--2.
		use-expressions="true" 的意思是开启表达式
		access-denied-page的意思是，当验证权限失败后会跳转到的页面
		entry-point-ref自定义登录入口
	-->
	<http auto-config="false" use-expressions="true" entry-point-ref="myAuthenticationEntryPoint">
		
		<!-- 3.无权限时跳转 -->
		<access-denied-handler error-page="/error/error/403"/>
		
		<!-- 4.匿名用户访问控制，这里设置不允许匿名用户登陆 -->
		<anonymous enabled="false"/>
		<!-- 5.所有地址全开，无需验证，测试用 -->
        <!-- <intercept-url pattern="/**" access="permitAll" /> -->
        <!-- 6.以上未列出的，也都必须验证才能访问 -->
        <intercept-url pattern="/**" access="isAuthenticated()" />
		
		<!-- 
            7.login-page：指定登录页面。
            authentication-failure-url：指定了身份验证失败时跳转到的页面。
            default-target-url：指定了成功进行身份验证和授权后默认呈现给用户的页面。
            always-use-default-target：指定了是否在身份验证通过后总是跳转到default-target-url属性指定的URL。
         -->
         <!-- 使用entry-point-ref -->
		<!-- <form-login login-page="/login" default-target-url="/welcome"
            authentication-failure-url="/loginfailed" always-use-default-target="true"/> -->
        
        <!-- 8.实现免登陆验证 -->
        <!-- <remember-me/> -->
        
        <!-- 10.退出时,session失效 -->
        <logout logout-success-url="/logout" invalidate-session="true" logout-url="/j_spring_security_logout"/>
        
        <!-- 9.同一用户允许最大在线数为1,再次登录时前一次登录用户会返回登录界面
            max-sessions:允许用户帐号登录的次数。范例限制用户只能登录一次。
            exception-if-maximum-exceeded: 默认为false，此值表示：用户第二次登录时，前一次的登录信息都被清空。
                                当exception-if-maximum-exceeded="true"时系统会拒绝第二次登录。
         -->
        <session-management  invalid-session-url="/login" session-authentication-strategy-ref="compositeSessionAuthenticationStrategy"/>
        
        
        <!-- 11.自定义过滤 -->
        <custom-filter ref="myUsernamePasswordAuthticationFilter" position="FORM_LOGIN_FILTER" />
        <custom-filter ref="concurrencyFilter" position="CONCURRENT_SESSION_FILTER"/>
        <custom-filter ref="mySecurityFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
	</http>
	
	<beans:bean id="myAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:constructor-arg name="loginFormUrl" value="/login" />
	</beans:bean>
	
	<!-- 自定义登录验证 -->
	<beans:bean id="myUsernamePasswordAuthticationFilter" class="com.company.finance.security.MyUsernamePasswordAuthticationFilter" init-method="init">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="successUrl" value="/welcome" />
		<beans:property name="failureUrl" value="/loginfailed" />
		<beans:property name="sessionAuthenticationStrategy" ref="compositeSessionAuthenticationStrategy" />
	</beans:bean>
	
	<!-- 必须在web.xml注册HttpSessionEventPublisher用于通知过期的会话 -->
	<beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>
	
	<!-- 检索过期的session,如果session过期,将触发LogoutFilter重定向到一个expiredURL
		最后到HttpSessionEventPublisher中的HttpSessionDestroyedEvent销毁session
	 -->
	<beans:bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
		<beans:constructor-arg name="expiredUrl" value="/login" />
	</beans:bean>
	
	<beans:bean id="compositeSessionAuthenticationStrategy" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
					<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry"/>
					<beans:property name="maximumSessions" value="1" />
					<beans:property name="exceptionIfMaximumExceeded" value="false" />
				</beans:bean>
				<!-- 固化session, -->
				<beans:bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy"/>
				<beans:bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
					<beans:constructor-arg name="sessionRegistry" ref="sessionRegistry"/>
				</beans:bean>
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>
	
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userService">
			<password-encoder ref="passwordEncoder" />
		</authentication-provider>
	</authentication-manager>
	
	<!-- 权限 -->
	<!--<beans:bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<beans:property name="userDetailsService" ref="userService" />
		<beans:property name="hideUserNotFoundExceptions" value="false" />
		<beans:property name="passwordEncoder" ref="passwordEncoder" />
	</beans:bean> -->
	
	<!-- nb的加密算法 -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	
	 <beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
  		<beans:property name="basenames" value="classpath:messages/messages"/>
	</beans:bean>
	
</beans:beans>